<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>博客 · 丁鹏</title>
    <link>https://srcio.cn/</link>
    <description>Recent content on 博客 · 丁鹏</description>
    <image>
      <url>https://srcio.cn/cover.png</url>
      <link>https://srcio.cn/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 25 Oct 2022 18:13:58 +0800</lastBuildDate><atom:link href="https://srcio.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 程序 SOLID 设计原则</title>
      <link>https://srcio.cn/series/programming-go/go-solid/</link>
      <pubDate>Tue, 25 Oct 2022 18:13:58 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/go-solid/</guid>
      <description>可重用软件设计的五个原则，SOLID 原则： 单一职责原则（Single Responsibility Principle） 开放 / 封闭原则（Open / Closed Principle） 里</description>
    </item>
    
    <item>
      <title>Go 包 - errors</title>
      <link>https://srcio.cn/series/programming-go/gopkg-errors/</link>
      <pubDate>Wed, 19 Oct 2022 14:44:06 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/gopkg-errors/</guid>
      <description>errors 包为你的 Go 程序提供一种对程序员调试、查看日志更友好的错误处理方式。 Go 程序中传统的错误处理方法： if err != nil { return err } 递归的向上传递错误，这种方式</description>
    </item>
    
    <item>
      <title>数组递归构造具有父子层级关系的对象</title>
      <link>https://srcio.cn/series/programming-go/menu-recursive/</link>
      <pubDate>Tue, 18 Oct 2022 18:00:26 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/menu-recursive/</guid>
      <description>场景介绍 从数据库获取到了菜单列表数据，这些菜单数据通过字段 ParentID 表示父子层级关系，现在需要将菜单列表数据转成树状的实例对象。 数据库取出的初始数据</description>
    </item>
    
    <item>
      <title>K8s 集群规划之节点资源配置</title>
      <link>https://srcio.cn/posts/k8s-node-resource-config/</link>
      <pubDate>Mon, 17 Oct 2022 20:21:58 +0800</pubDate>
      
      <guid>https://srcio.cn/posts/k8s-node-resource-config/</guid>
      <description>文章转载自：https://sataqiu.github.io/2019/09/09/architecting-kubernetes-clu</description>
    </item>
    
    <item>
      <title>Kubelet 垃圾回收原理剖析</title>
      <link>https://srcio.cn/posts/kubelet-recycle-policy/</link>
      <pubDate>Mon, 17 Oct 2022 19:21:58 +0800</pubDate>
      
      <guid>https://srcio.cn/posts/kubelet-recycle-policy/</guid>
      <description>文章转载自：https://sataqiu.github.io/2019/07/15/k8s-kubelet-gc/index.html Kubelet 垃</description>
    </item>
    
    <item>
      <title>CRD 简介</title>
      <link>https://srcio.cn/series/programming-kubernetes/crd/</link>
      <pubDate>Tue, 11 Oct 2022 23:50:34 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/crd/</guid>
      <description>CRD 字段校验配置 apiVersion:apiextensions.k8s.io/v1beta1kind:CustomResourceDefinitionmetadata:name:scalings.control.srcio.iospec:group:control.srcio.ioversions:- name:v1served:truestorage:truescope:Namespacednames:plural:scalingssingular:scalingkind:Scalingvalidation:openAPIV3Schema:properties:spec:required:- targetDeployment- minReplicas- maxReplicas- metricType- step- scaleUp- scaleDownproperties:targetDeployment:type:stringminReplicas:type:integerminimum:0maxReplicas:type:integerminimum:0metricType:type:stringenum:- CPU- MEMORY- REQUESTSstep:type:integerminimum:1scaleUp:type:integerscaleDown:type:integerminimum:0 是否必须 参数类型 枚举范围 数值最大最小</description>
    </item>
    
    <item>
      <title>Golang 切片扩容</title>
      <link>https://srcio.cn/series/programming-go/slice-append/</link>
      <pubDate>Tue, 11 Oct 2022 14:19:02 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/slice-append/</guid>
      <description>怎么理解切片 s = append(s, item) 需要使用 s 重新接收呢？ 在 golang 语言中所有的参数传递的方式都是值传递的，即便是指针，也是复制了一份指针传递； 切片发生扩容后，底</description>
    </item>
    
    <item>
      <title>Docker Compose 实践</title>
      <link>https://srcio.cn/posts/docker-compose/</link>
      <pubDate>Mon, 10 Oct 2022 19:21:58 +0800</pubDate>
      
      <guid>https://srcio.cn/posts/docker-compose/</guid>
      <description>安装 如果你安装了 Docker Desktop，那么它已经帮你自动安装了 Docker Compose 插件。否则，需要额外安装插件。 使用一下命令安装或升级 Docker Compose（linu</description>
    </item>
    
    <item>
      <title>Golang 生成证书</title>
      <link>https://srcio.cn/series/programming-go/gen-cert/</link>
      <pubDate>Sat, 08 Oct 2022 17:13:58 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/gen-cert/</guid>
      <description>代码实现 package certutil import ( &amp;#34;bytes&amp;#34; &amp;#34;crypto/rand&amp;#34; &amp;#34;crypto/rsa&amp;#34; &amp;#34;crypto/x509&amp;#34; &amp;#34;crypto/x509/pkix&amp;#34; &amp;#34;encoding/pem&amp;#34; &amp;#34;math/big&amp;#34; &amp;#34;net&amp;#34; &amp;#34;time&amp;#34; ) // CA ca type CA struct { caInfo *x509.Certificate caPrivKey *rsa.PrivateKey caPem, caKeyPem []byte } // GetCAPem get ca pem bytes func (c *CA) GetCAPem() ([]byte, error) { if c.caPem == nil { // create the CA caBytes, err := x509.CreateCertificate(rand.Reader, c.caInfo, c.caInfo, &amp;amp;c.caPrivKey.PublicKey, c.caPrivKey) if err != nil { return nil,</description>
    </item>
    
    <item>
      <title>Golang 实现双向认证</title>
      <link>https://srcio.cn/series/programming-go/mtls/</link>
      <pubDate>Sun, 02 Oct 2022 01:49:13 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/mtls/</guid>
      <description>TLS 传输层安全协议（TLS），在互联网上，通常是由服务器单向的向客户端提供证书，以证明其身份。 mTLS 双向 TLS 认证，是指在客户端和服务器之间使用双行加</description>
    </item>
    
    <item>
      <title>构造 rest.Config 实例</title>
      <link>https://srcio.cn/series/programming-kubernetes/rest-config/</link>
      <pubDate>Sat, 01 Oct 2022 23:28:02 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/rest-config/</guid>
      <description>本节介绍几种构造 rest.Config 实例的场景或者方法。 rest.Config 可以帮助我们构建各种类型的 Kubernetes 客户端实例，从而访问 Kubernetes APIServer。 通过 kubeconfig 文件构造 程序通过读取 kubeconfig 文</description>
    </item>
    
    <item>
      <title>Go1.18 - 工作区模式</title>
      <link>https://srcio.cn/series/programming-go/go-work/</link>
      <pubDate>Wed, 28 Sep 2022 18:25:05 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-go/go-work/</guid>
      <description>安装的 Go1.18 或更新版本，它为你提供了工作区模式（Workspace mode），帮助你更好做 go 模块之间依赖的管理。 例如，你开发一个新项目，分了两个</description>
    </item>
    
    <item>
      <title>使用 Giscus 作为博客评论系统</title>
      <link>https://srcio.cn/posts/use-giscus/</link>
      <pubDate>Wed, 28 Sep 2022 09:02:43 +0800</pubDate>
      
      <guid>https://srcio.cn/posts/use-giscus/</guid>
      <description>Giscus 开源、无广告、永久免费 支持多语言 支持表情反馈 支持懒加载 必要条件 你的博客所用的 GitHub 的仓库必须是 Public，并且开通了 Dicussion 功能； 安装 giscus</description>
    </item>
    
    <item>
      <title>构造 Kubernetes 客户端实例</title>
      <link>https://srcio.cn/series/programming-kubernetes/kube-client/</link>
      <pubDate>Sat, 01 Oct 2022 23:39:15 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/kube-client/</guid>
      <description>本节介绍 Golang 程序如何通过 rest.Config 实例获取各种类型的 Kubernetes 客户端实例。 通过客户端访问 Kubernetes 中的 API 资源实例。 Clientset 获取 *kubernetes.Clientset 推荐使用该客户端实例去操作 K8s API 资源。 package main import (</description>
    </item>
    
    <item>
      <title>Kubernetes API 设计</title>
      <link>https://srcio.cn/series/programming-kubernetes/api-design/</link>
      <pubDate>Sun, 02 Oct 2022 01:28:03 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/api-design/</guid>
      <description>术语 Group API 资源置于某个分组下，组作为相关功能的集合。一个组包含一个或多个版本。 Version API 资源的版本，API 资源版本是会不断迭代的。 Kind API 资源的的类型，</description>
    </item>
    
    <item>
      <title>Kuberentes Operator</title>
      <link>https://srcio.cn/series/programming-kubernetes/operator/</link>
      <pubDate>Sun, 02 Oct 2022 01:12:34 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/operator/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 client-gen 生成 clientset 代码</title>
      <link>https://srcio.cn/series/programming-kubernetes/client-gen-usage/</link>
      <pubDate>Sat, 08 Oct 2022 17:37:07 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/client-gen-usage/</guid>
      <description>本页是这篇Kubernetes 文档中一些内容摘要。 大致分为 3 个步骤： 为 API 类型结构做 tag 标签 在 API 类型例如 pkg/apis/${Group}/${Version}/types.go 中的 Pod 结构体上打标签，支持的标签： // +</description>
    </item>
    
    
    
  </channel>
</rss>
