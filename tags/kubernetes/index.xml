<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on 博客</title>
    <link>https://blog.srcio.cn/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 博客</description>
    <image>
      <url>https://blog.srcio.cn/cover.png</url>
      <link>https://blog.srcio.cn/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 08 Oct 2022 17:37:07 +0800</lastBuildDate><atom:link href="https://blog.srcio.cn/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>构造 rest.Config 实例</title>
      <link>https://blog.srcio.cn/series/programming-kubernetes/rest-config/</link>
      <pubDate>Sat, 01 Oct 2022 23:28:02 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-kubernetes/rest-config/</guid>
      <description>本节介绍几种构造 rest.Config 实例的场景或者方法。
rest.Config 可以帮助我们构建各种类型的 Kubernetes 客户端实例，从而访问 Kubernetes APIServer。
通过 kubeconfig 文件构造 程序通过读取 kubeconfig 文件来构造一个 rest.Config 对象。
package main import ( &amp;#34;k8s.io/client-go/rest&amp;#34; &amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34; ) func KubeConfig() *rest.Config { config, err := clientcmd.BuildConfigFromFlags(&amp;#34;&amp;#34;, clientcmd.RecommendedHomeFile) if err != nil { panic(err) } return config } 通过 Secret 资源构造 通过将程序部署在 Kubernetes 集群中，使用 Pod 所配置的 ServiceAccount（默认：default）账号构造 rest.Config 对象。
 运行的 Pod 内都会存储一个
每个 ServiceAccount 都有一个对应的 Secret，这个 Secret 包含了对集群的操作权限。
 package main import ( &amp;#34;k8s.io/client-go/rest&amp;#34; ) func KubeConfig() *rest.</description>
    </item>
    
    <item>
      <title>构造 Kubernetes 客户端实例</title>
      <link>https://blog.srcio.cn/series/programming-kubernetes/kube-client/</link>
      <pubDate>Sat, 01 Oct 2022 23:39:15 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-kubernetes/kube-client/</guid>
      <description>本节介绍 Golang 程序如何通过 rest.Config 实例获取各种类型的 Kubernetes 客户端实例。 通过客户端访问 Kubernetes 中的 API 资源实例。
Clientset  获取 *kubernetes.Clientset
推荐使用该客户端实例去操作 K8s API 资源。  package main import ( &amp;#34;k8s.io/client-go/kubernetes&amp;#34; &amp;#34;k8s.io/client-go/rest&amp;#34; ) func Clientset(config *rest.Config) *kubernetes.Clientset { client, err := kubernetes.NewForConfig(config) if err != nil { panic(err) } return client } 获取 *rest.RESTClient
可以通过该客户端实例获取内置的以及自定义的 K8s API 资源。  package main import &amp;#34;k8s.io/client-go/rest&amp;#34; func RESTClient(config *rest.Config) *rest.RESTClient { client, err := rest.RESTClientFor(config) if err != nil { panic(err) } return client } DiscoveryClient DiscoveryClient 动态客户端，通过动态指定 GVR 来操作任意的 Kubernetes 资源（内置资源 + CR）</description>
    </item>
    
    <item>
      <title>Kubernetes API 设计</title>
      <link>https://blog.srcio.cn/series/programming-kubernetes/api-design/</link>
      <pubDate>Sun, 02 Oct 2022 01:28:03 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-kubernetes/api-design/</guid>
      <description>术语 Group
API 资源置于某个分组下，组作为相关功能的集合。一个组包含一个或多个版本。
Version
API 资源的版本，API 资源版本是会不断迭代的。
Kind
API 资源的的类型，用于存储 API 资源的描述信息或状态等。同一个 Kind 的 API 资源可以有多个版本，随着版本的不断迭代，Kind 代表的资源的会有字段内容的更改。
GVK
Group/Version/Kind，例如 Deployment：
apiVersion:apps/v1kind:Deploymentmetadata:- name:deploy-1... 上面的代码示例描述了一个 API 资源对象，这个资源对象：
 Group 是 apps Version 是 v1 Kind 是 Deployment。   Resource
代表 API 资源，与 GVK 一对一的关系。
GVR
可以将 GVK 比作是一个类，GVR 就是这个 GVK 类的实例。
当我们以 REST 的方式向发起 API 资源的请求是，请求 URL 格式一般类似这样：/api/apps/v1/deployments，里面就包含了三个上面提到的术语概念：
 /apps：请求资源所在的组（Group） /v1：请求资源的版本（Version） /deployments：请求的资源的名称（Resource）  </description>
    </item>
    
    <item>
      <title>Kuberentes Operator</title>
      <link>https://blog.srcio.cn/series/programming-kubernetes/operator/</link>
      <pubDate>Sun, 02 Oct 2022 01:12:34 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-kubernetes/operator/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 client-gen 生成 clientset 代码</title>
      <link>https://blog.srcio.cn/series/programming-kubernetes/client-gen-usage/</link>
      <pubDate>Sat, 08 Oct 2022 17:37:07 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-kubernetes/client-gen-usage/</guid>
      <description>使用 client-gen 生成 clientset 代码</description>
    </item>
    
  </channel>
</rss>
