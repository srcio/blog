<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on 博客 · 丁鹏</title>
    <link>https://srcio.cn/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 博客 · 丁鹏</description>
    <image>
      <url>https://srcio.cn/cover.png</url>
      <link>https://srcio.cn/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 11 Oct 2022 23:50:34 +0800</lastBuildDate><atom:link href="https://srcio.cn/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CRD 简介</title>
      <link>https://srcio.cn/series/programming-kubernetes/crd/</link>
      <pubDate>Tue, 11 Oct 2022 23:50:34 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/crd/</guid>
      <description>CRD 字段校验配置
apiVersion:apiextensions.k8s.io/v1beta1kind:CustomResourceDefinitionmetadata:name:scalings.control.srcio.iospec:group:control.srcio.ioversions:- name:v1served:truestorage:truescope:Namespacednames:plural:scalingssingular:scalingkind:Scalingvalidation:openAPIV3Schema:properties:spec:required:- targetDeployment- minReplicas- maxReplicas- metricType- step- scaleUp- scaleDownproperties:targetDeployment:type:stringminReplicas:type:integerminimum:0maxReplicas:type:integerminimum:0metricType:type:stringenum:- CPU- MEMORY- REQUESTSstep:type:integerminimum:1scaleUp:type:integerscaleDown:type:integerminimum:0  是否必须 参数类型 枚举范围 数值最大最小   </description>
    </item>
    
    <item>
      <title>Kubelet 垃圾回收原理剖析</title>
      <link>https://srcio.cn/posts/kubelet-recycle-policy/</link>
      <pubDate>Mon, 10 Oct 2022 19:21:58 +0800</pubDate>
      
      <guid>https://srcio.cn/posts/kubelet-recycle-policy/</guid>
      <description>文章转载自：https://sataqiu.github.io/2019/07/15/k8s-kubelet-gc/index.html
 Kubelet 垃圾回收（Garbage Collection）是一个非常有用的功能，它负责自动清理节点上的无用镜像和容器。Kubelet 每隔 1 分钟进行一次容器清理，每隔 5 分钟进行一次镜像清理（截止到 v1.15 版本，垃圾回收间隔时间还都是在源码中固化的，不可自定义配置）。如果节点上已经运行了 Kubelet，不建议再额外运行其它的垃圾回收工具，因为这些工具可能错误地清理掉 Kubelet 认为本应保留的镜像或容器，从而可能造成不可预知的问题。
镜像回收 Kubernetes 对节点上的所有镜像提供生命周期管理服务，这里的『所有镜像』是真正意义上的所有镜像，而不仅仅是通过 Kubelet 拉取的镜像。当磁盘使用率超过设定上限（HighThresholdPercent）时，Kubelet 就会按照 LRU 清除策略逐个清理掉那些没有被任何 Pod 容器（包括那些已经死亡的容器）所使用的镜像，直到磁盘使用率降到设定下限（LowThresholdPercent）或没有空闲镜像可以清理。此外，在进行镜像清理时，会考虑镜像的生存年龄，对于年龄没有达到最短生存年龄（MinAge）要求的镜像，暂不予以清理。
主体流程   如上图所示，Kubelet 对于节点上镜像的回收流程还是比较简单的，在磁盘使用率超出设定上限后：首先，通过 CRI 容器运行时接口读取节点上的所有镜像以及 Pod 容器；然后，根据现有容器列表过滤出那些已经不被任何容器所使用的镜像；接着，按照镜像最近被使用时间排序，越久被用到的镜像越会被排在前面，优先清理；最后，就按照排好的顺序逐个清理镜像，直到磁盘使用率降到设定下限（或者已经没有空闲镜像可以清理）。
需要注意的是，Kubelet 读取到的镜像列表是节点镜像列表，而读取到的容器列表却仅包括由其管理的容器（即 Pod 容器，包括 Pod 内的死亡容器）。因此，那些用户手动 run 起来的容器，对于 Kubelet 垃圾回收来说就是不可见的，也就不能阻止对相关镜像的垃圾回收。当然，Kubelet 的镜像回收不是 force 类型的回收，虽然会对用户手动下载的镜像进行回收动作，但如果确实有运行的（或者停止的任何）容器与该镜像关联的话，删除操作就会失败（被底层容器运行时阻止删除）。
用户配置 通过上面的分析，我们知道影响镜像垃圾回收的关键参数有：
image-gc-high-threshold`：磁盘使用率上限，有效范围 [0-100]，默认 `85 image-gc-low-threshold`：磁盘使用率下限，有效范围 [0-100]，默认 `80 minimum-image-ttl-duration：镜像最短应该生存的年龄，默认 2 分钟
实验环节 本节我们通过实验来验证镜像垃圾回收（基于 Kubelet 1.15 版本）。
实验前，需要配置 Kubelet 启动参数，降低磁盘使用率上限，以便能够直接触发镜像回收。
# vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf .</description>
    </item>
    
    <item>
      <title>构造 rest.Config 实例</title>
      <link>https://srcio.cn/series/programming-kubernetes/rest-config/</link>
      <pubDate>Sat, 01 Oct 2022 23:28:02 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/rest-config/</guid>
      <description>本节介绍几种构造 rest.Config 实例的场景或者方法。
rest.Config 可以帮助我们构建各种类型的 Kubernetes 客户端实例，从而访问 Kubernetes APIServer。
通过 kubeconfig 文件构造 程序通过读取 kubeconfig 文件来构造一个 rest.Config 对象。
package main import ( &amp;#34;k8s.io/client-go/rest&amp;#34; &amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34; ) func KubeConfig() *rest.Config { config, err := clientcmd.BuildConfigFromFlags(&amp;#34;&amp;#34;, clientcmd.RecommendedHomeFile) if err != nil { panic(err) } return config } 通过 Secret 资源构造 通过将程序部署在 Kubernetes 集群中，使用 Pod 所配置的 ServiceAccount（默认：default）账号构造 rest.Config 对象。
 运行的 Pod 内都会存储一个
每个 ServiceAccount 都有一个对应的 Secret，这个 Secret 包含了对集群的操作权限。
 package main import ( &amp;#34;k8s.io/client-go/rest&amp;#34; ) func KubeConfig() *rest.</description>
    </item>
    
    <item>
      <title>构造 Kubernetes 客户端实例</title>
      <link>https://srcio.cn/series/programming-kubernetes/kube-client/</link>
      <pubDate>Sat, 01 Oct 2022 23:39:15 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/kube-client/</guid>
      <description>本节介绍 Golang 程序如何通过 rest.Config 实例获取各种类型的 Kubernetes 客户端实例。 通过客户端访问 Kubernetes 中的 API 资源实例。
Clientset  获取 *kubernetes.Clientset
推荐使用该客户端实例去操作 K8s API 资源。  package main import ( &amp;#34;k8s.io/client-go/kubernetes&amp;#34; &amp;#34;k8s.io/client-go/rest&amp;#34; ) func Clientset(config *rest.Config) *kubernetes.Clientset { client, err := kubernetes.NewForConfig(config) if err != nil { panic(err) } return client } 获取 *rest.RESTClient
可以通过该客户端实例获取内置的以及自定义的 K8s API 资源。  package main import &amp;#34;k8s.io/client-go/rest&amp;#34; func RESTClient(config *rest.Config) *rest.RESTClient { client, err := rest.RESTClientFor(config) if err != nil { panic(err) } return client } DiscoveryClient DiscoveryClient 动态客户端，通过动态指定 GVR 来操作任意的 Kubernetes 资源（内置资源 + CR）</description>
    </item>
    
    <item>
      <title>Kubernetes API 设计</title>
      <link>https://srcio.cn/series/programming-kubernetes/api-design/</link>
      <pubDate>Sun, 02 Oct 2022 01:28:03 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/api-design/</guid>
      <description>术语 Group
API 资源置于某个分组下，组作为相关功能的集合。一个组包含一个或多个版本。
Version
API 资源的版本，API 资源版本是会不断迭代的。
Kind
API 资源的的类型，用于存储 API 资源的描述信息或状态等。同一个 Kind 的 API 资源可以有多个版本，随着版本的不断迭代，Kind 代表的资源的会有字段内容的更改。
GVK
Group/Version/Kind，例如 Deployment：
apiVersion:apps/v1kind:Deploymentmetadata:- name:deploy-1... 上面的代码示例描述了一个 API 资源对象，这个资源对象：
 Group 是 apps Version 是 v1 Kind 是 Deployment。   Resource
代表 API 资源，与 GVK 一对一的关系。
GVR
可以将 GVK 比作是一个类，GVR 就是这个 GVK 类的实例。
当我们以 REST 的方式向发起 API 资源的请求是，请求 URL 格式一般类似这样：/api/apps/v1/deployments，里面就包含了三个上面提到的术语概念：
 /apps：请求资源所在的组（Group） /v1：请求资源的版本（Version） /deployments：请求的资源的名称（Resource）  </description>
    </item>
    
    <item>
      <title>Kuberentes Operator</title>
      <link>https://srcio.cn/series/programming-kubernetes/operator/</link>
      <pubDate>Sun, 02 Oct 2022 01:12:34 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/operator/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 client-gen 生成 clientset 代码</title>
      <link>https://srcio.cn/series/programming-kubernetes/client-gen-usage/</link>
      <pubDate>Sat, 08 Oct 2022 17:37:07 +0800</pubDate>
      
      <guid>https://srcio.cn/series/programming-kubernetes/client-gen-usage/</guid>
      <description>本页是这篇Kubernetes 文档中一些内容摘要。
大致分为 3 个步骤：
 为 API 类型结构做 tag 标签 在 API 类型例如 pkg/apis/${Group}/${Version}/types.go 中的 Pod 结构体上打标签，支持的标签：   // +genclient：生成客户端函数（包括 Create, Update, Delete, DeleteCollection, Get, List, Update, Patch, Watch，如果 API 类型结构中包括 .Status 字段，还会额外生成 UpdateStatus 函数）； // +genclient:nonNamespaced：指定 API 类型是集群级别而不是命名空间级别的，生成的客户端函数都没有命名空间； // +genclient:onlyVerbs=create,get：只生成 Create, Get 客户端函数； // +genclient:skipVerbs=watch：生成除了 Watch 之外的所有其他客户端函数； // +genclient:noStatus：即使 API 类型结构包含 .Status 字段，也不生成 UpdateStatus 客户端函数； 有些情况下，可能你想要额外生成非标准的客户端函数，例如子资源函数，那么你需要使用下列这些 tag 标签： // +genclient:method=Scale,verb=update,subresource=scale,input=k8s.io/api/extensions/v1beta1.Scale,result=k8s.io/api/extensions/v1beta1.Scale：该例中使用标签，将会自动生成 Scale(string, *v1beta.Scale) *v1beta.Scale 客户端函数，里面配置了子资源函数的输入和输出参数。 另外，以下的 tag 标签也影响着客户端代码的生成： // +groupName=policy.</description>
    </item>
    
  </channel>
</rss>
