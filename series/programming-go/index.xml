<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang 编程 on 博客</title>
    <link>https://blog.srcio.cn/series/programming-go/</link>
    <description>Recent content in Golang 编程 on 博客</description>
    <image>
      <url>https://blog.srcio.cn/cover.png</url>
      <link>https://blog.srcio.cn/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 28 Sep 2022 18:23:19 +0800</lastBuildDate><atom:link href="https://blog.srcio.cn/series/programming-go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go1.18 - 工作区模式</title>
      <link>https://blog.srcio.cn/series/programming-go/go-work/</link>
      <pubDate>Wed, 28 Sep 2022 18:25:05 +0800</pubDate>
      
      <guid>https://blog.srcio.cn/series/programming-go/go-work/</guid>
      <description>安装最新的Go1.18版本，它为你提供了工作区模式，帮助你轻松依赖本地类库。
例如，你开发一个新项目，分了两个 go module，分别为 service-a 和 service-b，service-a 依赖了service-b ，现在项目还处于开发阶段，我们都是这么处理的。
创建项目目录：
mkdir service cd service 创建 service-b 模块:
mkdir service-b cd service-b go mod init github.com/srcio/service-b 编写 service-b 模块代码：
mkdir greeting vim greeting/hello.go package greeting import &amp;#34;fmt&amp;#34; func Hello(name string){ fmt.Println(&amp;#34;Hello, &amp;#34; + name) } 继续创建 service-a 模块：
cd .. mkdir service-a cd service-a go mod init github.com/srcio/service-a 因为 service-a 需要依赖本地开发的 service-b 类库，所以我们需要在 go.mod 中引入 service-a ：
vim go.mod module github.com/srcio/service-a go 1.</description>
    </item>
    
  </channel>
</rss>
